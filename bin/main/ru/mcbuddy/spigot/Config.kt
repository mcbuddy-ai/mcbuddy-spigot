@file:Suppress("SameParameterValue")

package ru.mcbuddy.spigot

import org.bukkit.NamespacedKey
import org.bukkit.Particle
import org.bukkit.Registry
import org.bukkit.Sound
import org.bukkit.configuration.file.FileConfiguration
import org.bukkit.plugin.java.JavaPlugin

class Config(private val plugin: JavaPlugin) {
  init {
    plugin.logger.info("üîÑ Initializing configuration...")
  }

  val server = Server() ; inner class Server(config: FileConfiguration = plugin.config) {
    val url = config.getString("server.url", "https://mcbuddy.ru")!!

    init {
      plugin.logger.info("‚úÖ Server Settings loaded")
    }
  }

  val http = Http() ; inner class Http(config: FileConfiguration = plugin.config) {
    val callTimeout = config.getInt("http.call_timeout", 60).toLong()
    val connectTimeout = config.getInt("http.connect_timeout", 10).toLong()
    val readTimeout = config.getInt("http.read_timeout", 30).toLong()
    val writeTimeout = config.getInt("http.write_timeout", 10).toLong()
    val maxIdleConnections = config.getInt("http.max_idle_connections", 5)
    val keepAliveDuration = config.getInt("http.keep_alive_duration", 300).toLong()
    val maxRequestsPerHost = config.getInt("http.max_requests_per_host", 5)
    val followRedirects = config.getBoolean("http.follow_redirects", true)
    val retryOnConnectionFailure = config.getBoolean("http.retry_on_connection_failure", true)
    val compressionEnabled = config.getBoolean("http.compression_enabled", true)
    val logging = config.getBoolean("http.logging", false)
    val userAgent = config.getString("http.user_agent", "MCBuddy-Spigot/1.1.0 (Minecraft Plugin)")!!
    val customHeaders = config.getConfigurationSection("http.custom_headers").let { it?.getKeys(false)?.associateWith(it::getString) } ?: emptyMap()

    init {
      plugin.logger.info("‚úÖ HTTP Settings loaded")
    }
  }

  val ui = UI() ; inner class UI(val config: FileConfiguration = plugin.config) {
    val actionBarEnabled = config.getBoolean("ui.action_bar.enabled", true)
    val actionBarThinkingText = config.getString("ui.action_bar.thinking_text", "&eAI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –¥—É–º–∞–µ—Ç")!!
    val actionBarAskxText = config.getString("ui.action_bar.askx_text", "&e–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã")!!
    val actionBarAnimationSpeed = config.getInt("ui.action_bar.animation_speed", 500).toLong()

    val particlesEnabled = config.getBoolean("ui.particles.enabled", true)
    val particleType = getParticle("ui.particles.type", "ENCHANT", Particle.ENCHANT)
    val particleCount = config.getInt("ui.particles.count", 3)
    val particleHeightOffset = config.getDouble("ui.particles.height_offset", 2.0)
    val particleAnimationInterval = config.getInt("ui.particles.animation_interval", 250).toLong()

    val chatStatusEnabled = config.getBoolean("ui.chat_status.enabled", true)

    val soundsEnabled = config.getBoolean("ui.sounds.enabled", true)
    val successSound = getSound("ui.sounds.success_sound", "ENTITY_EXPERIENCE_ORB_PICKUP", Sound.ENTITY_EXPERIENCE_ORB_PICKUP)
    val successVolume = config.getDouble("ui.sounds.success_volume", 0.5).toFloat()
    val successPitch = config.getDouble("ui.sounds.success_pitch", 1.2).toFloat()
    val errorSound = getSound("ui.sounds.error_sound", "AMBIENT_CAVE", Sound.AMBIENT_CAVE)
    val errorVolume = config.getDouble("ui.sounds.error_volume", 0.6).toFloat()
    val errorPitch = config.getDouble("ui.sounds.error_pitch", 0.7).toFloat()
    val thinkingSound = getSound("ui.sounds.thinking_sound", "BLOCK_NOTE_BLOCK_CHIME", Sound.BLOCK_NOTE_BLOCK_CHIME)
    val thinkingVolume = config.getDouble("ui.sounds.thinking_volume", 0.3).toFloat()
    val thinkingPitch = config.getDouble("ui.sounds.thinking_pitch", 1.0).toFloat()

    init {
      plugin.logger.info("‚úÖ UI Settings loaded")
    }

    private fun getSound(key: String, default: String, defaultSound: Sound) = runCatching {
      Registry.SOUNDS.get(NamespacedKey.fromString(config.getString(key, default)!!)!!)!!
    }.getOrElse {
      plugin.logger.warning("‚ùå Error while loading sound `$key`")
      defaultSound
    }

    private fun getParticle(key: String, default: String, defaultParticle: Particle) = runCatching {
      Particle.valueOf(config.getString(key, default)!!)
    }.getOrElse {
      plugin.logger.warning("‚ùå Error while loading particle `$key`")
      defaultParticle
    }
  }

  val messages = Messages() ; inner class Messages(config: FileConfiguration = plugin.config) {
    val thinkingMessage = config.getString("messages.thinking", "&e–û–±—Ä–∞—â–∞—é—Å—å –∫ AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç—É, –ø–æ–¥–æ–∂–¥–∏—Ç–µ –Ω–µ–º–Ω–æ–≥–æ...")!!
    val errorMessage = config.getString("messages.error", "&c–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞")!!
    val usageMessage = config.getString("messages.usage", "&7–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: &f/ask <–≤–æ–ø—Ä–æ—Å>\n&7–ü—Ä–∏–º–µ—Ä: &f/ask –∫–∞–∫ —Å–∫—Ä–∞—Ñ—Ç–∏—Ç—å –∞–ª–º–∞–∑–Ω—É—é –∫–∏—Ä–∫—É?")!!

    val askxThinkingMessage = config.getString("messages.askx_thinking", "&e–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é –≤–∞—à –∑–∞–ø—Ä–æ—Å –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é –∫–æ–º–∞–Ω–¥—ã...")!!
    val askxErrorMessage = config.getString("messages.askx_error", "&c–ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.")!!
    val askxUsageMessage = config.getString("messages.askx_usage", "&7–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: &f/askx <–æ–ø–∏—Å–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è>\n&7–ü—Ä–∏–º–µ—Ä: &f/askx –¥–∞–π –º–Ω–µ –∞–ª–º–∞–∑–Ω—ã–π –º–µ—á —Å –æ—Å—Ç—Ä–æ—Ç–æ–π 5")!!
    val blockedCommandMessage = config.getString("messages.blocked_command", "&c–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∞ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —á–µ—Ä–µ–∑ /askx –∏–∑ —Å–æ–æ–±—Ä–∞–∂–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏.")!!

    val reloadSuccessMessage = config.getString("messages.reload_success", "&a–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è MCBuddy —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∂–µ–Ω–∞!")!!
    val reloadErrorMessage = config.getString("messages.reload_error", "&c–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {error}")!!

    val noCommandsToExecuteMessage = config.getString("messages.no_commands_to_execute", "&e–ù–µ—Ç –∫–æ–º–∞–Ω–¥ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è")!!
    val commandsExecutingMessage = config.getString("messages.commands_executing", "&a–í—ã–ø–æ–ª–Ω—è—é {count} –∫–æ–º–∞–Ω–¥{sequence}...")!!
    val commandExecutedMessage = config.getString("messages.command_executed", "&a–í—ã–ø–æ–ª–Ω–µ–Ω–æ: /{command}")!!
    val commandFailedMessage = config.getString("messages.command_failed", "&c–û—à–∏–±–∫–∞: /{command}")!!
    val commandExecutionErrorMessage = config.getString("messages.command_execution_error", "&c–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: /{command}")!!

    init {
      plugin.logger.info("‚úÖ Messages Settings loaded")
    }
  }

  val blockedCommands = BlockedCommands() ; inner class BlockedCommands(config: FileConfiguration = plugin.config) {
    val commands = config.getStringList("blocked_commands").map(String::lowercase).toSet()

    init {
      plugin.logger.info("‚úÖ Blocked Commands loaded")
    }
  }

  init {
    plugin.logger.info("‚úÖ Configuration successfully loaded")
  }
}